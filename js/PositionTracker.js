// Generated by CoffeeScript 1.6.1
(function() {
  var EventEmitter, Frame, InitialFrame, MPU6050, PositionTracker,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require("events").EventEmitter;

  Frame = require("./Frame");

  InitialFrame = require("./InitialFrame");

  MPU6050 = require("./MPU6050");

  PositionTracker = (function(_super) {

    __extends(PositionTracker, _super);

    function PositionTracker(speed) {
      this.speed = speed;
      this.speed || (this.speed = 50);
      this.accelerometer = new MPU6050;
      this.running = false;
    }

    PositionTracker.prototype.init = function(afterInit) {
      var afterRead;
      afterRead = function(err, result) {
        var accel, gyro, initialFrame, time;
        accel = result[0];
        gyro = result[1];
        time = result[2];
        initialFrame = new InitialFrame(accel, gyro, time);
        return afterInit(initialFrame);
      };
      return mpu.read(afterRead.bind(this));
    };

    PositionTracker.prototype.run = function(initialFrame) {
      var readResult;
      readResult = function(err, values) {
        var accel, gyro, newFrame, time;
        if (err) {
          return console.log(err);
        }
        accel = result[0];
        gyro = result[1];
        time = result[2];
        newFrame = new Frame(lastFrame, accel, gyro, time);
        this.emit("data", newFrame);
        if (this.running) {
          return setTimeout(run(newFrame).bind(this), this.speed);
        }
      };
      return this.accelerometer.read(readResult.bind(this));
    };

    PositionTracker.prototype.start = function() {
      this.running = true;
      return this.init(this.run);
    };

    PositionTracker.prototype.stop = function() {
      return this.running = false;
    };

    PositionTracker.prototype.restart = function() {
      this.stop();
      return this.start();
    };

    return PositionTracker;

  })(EventEmitter);

  module.exports = PositionTracker;

}).call(this);
