// Generated by CoffeeScript 1.6.1
(function() {
  var EventEmitter, Frame, InitialFrame, MPU6050, PositionTracker,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require("events").EventEmitter;

  Frame = require("./Frame");

  InitialFrame = require("./InitialFrame");

  MPU6050 = require("./MPU6050");

  PositionTracker = (function(_super) {

    __extends(PositionTracker, _super);

    function PositionTracker(speed) {
      this.speed = speed;
      this.speed || (this.speed = 50);
      this.accelerometer = new MPU6050;
      this.running = false;
    }

    PositionTracker.prototype.init = function(afterInit) {
      var afterRead, count, initialFrame;
      initialFrame = new InitialFrame();
      count = 10;
      afterRead = function(err, result) {
        var accel, gyro, time;
        if (err) {
          return console.log(err);
        }
        count -= 1;
        accel = result[0];
        gyro = result[1];
        time = result[2];
        if (count <= 0) {
          initialFrame.finalizeCal();
          return afterInit(initialFrame);
        } else {
          initialFrame.addCalData(accel, gyro, time);
          return this.accelerometer.read(afterRead.bind(this));
        }
      };
      return this.accelerometer.read(afterRead.bind(this));
    };

    PositionTracker.prototype.run = function(initialFrame) {
      var accel, applyXYZ, average, getFrame, gyro, step, stepSize;
      step = 0;
      stepSize = 10;
      accel = initialFrame.accel;
      gyro = initialFrame.gyro;
      applyXYZ = function(fcn) {
        return [0, 1, 2].map(fcn, this);
      };
      average = function(last, now) {
        return last + (now / stepSize);
      };
      getFrame = function(prevFrame) {
        var readResult;
        readResult = function(err, result) {
          var newFrame, time;
          if (err) {
            return console.log(err);
          }
          accel = result[0];
          gyro = result[1];
          time = result[2];
          newFrame = new Frame(initialFrame, prevFrame, accel, gyro, time);
          this.emit("data", newFrame);
          if (this.running) {
            return setTimeout(getFrame.bind(this, newFrame), this.speed);
          }
        };
        return this.accelerometer.read(readResult.bind(this));
      };
      return getFrame.call(this, initialFrame);
    };

    PositionTracker.prototype.start = function() {
      this.running = true;
      return this.init(this.run.bind(this));
    };

    PositionTracker.prototype.stop = function() {
      return this.running = false;
    };

    PositionTracker.prototype.restart = function() {
      this.stop();
      return this.start();
    };

    return PositionTracker;

  })(EventEmitter);

  module.exports = PositionTracker;

}).call(this);
