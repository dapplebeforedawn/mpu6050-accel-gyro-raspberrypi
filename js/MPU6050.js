// Generated by CoffeeScript 1.6.1
(function() {
  var MPU6050, mpu;

  MPU6050 = (function() {
    var activateAddress, activateValue, address, command, device, i2c, length, wire;

    i2c = require("i2c");

    address = 0x68;

    device = "/dev/i2c-1";

    wire = new i2c(address, {
      device: device
    });

    activateAddress = 0x6B;

    activateValue = 0x00;

    wire.writeBytes(activateAddress, [activateValue], function(err) {
      if (err) {
        return console.log(err);
      }
    });

    command = 0x3B;

    length = 14;

    function MPU6050() {}

    MPU6050.prototype.read = function(callback) {
      var currentBytes;
      currentBytes = function(err, res) {
        var accel, gyro;
        accel = this.calAccel(res.slice(0, 6));
        gyro = this.calAccel(res.slice(8, 14));
        return callback(err, [accel, gyro, Date.now()]);
      };
      return wire.readBytes(command, length, currentBytes.bind(this));
    };

    MPU6050.prototype.applyBuffToEng = function(calFactor) {
      return function(buffer) {
        return buffer.readInt16BE(0) * calFactor;
      };
    };

    MPU6050.prototype.sliceVector = function(vector) {
      return [vector.slice(0, 2), vector.slice(2, 4), vector.slice(4, 6)];
    };

    MPU6050.prototype.calAccel = function(accelSlice) {
      var calFactor, fullscale_bits, fullscale_eng;
      fullscale_eng = 2;
      fullscale_bits = 32767;
      calFactor = fullscale_eng / fullscale_bits;
      return this.sliceVector(accelSlice).map(this.applyBuffToEng(calFactor));
    };

    MPU6050.prototype.calGyro = function(gyroSlice) {
      var calFactor, fullscale_bits, fullscale_eng;
      fullscale_eng = 250;
      fullscale_bits = 32767;
      calFactor = fullscale_eng / fullscale_bits;
      return this.sliceVector(gyroSlice).map(this.applyBuffToEng(calFactor));
    };

    return MPU6050;

  })();

  module.exports = MPU6050;

  mpu = new MPU6050;

  setInterval(function() {
    return mpu.read(function(err, result) {
      return console.log(result);
    });
  }, 200);

}).call(this);
