// Generated by CoffeeScript 1.6.1
(function() {
  var Frame, Gravity, Matrix, Rotation;

  Rotation = require("./Rotator");

  Gravity = require("./Gravity");

  Matrix = require("./Matrix");

  Frame = (function() {
    var applyXYZ, calcAccel, calcEndVelocity, calcPosition, calcPositionDelta, calcRotation, calcTimeDelta, normalAccel, scale;

    function Frame(initialFrame, lastFrame, accelValues, gyroValues, timestamp) {
      this.initialFrame = initialFrame;
      this.lastFrame = lastFrame;
      this.accelValues = accelValues;
      this.timestamp = timestamp;
      this.timeDelta = calcTimeDelta.call(this);
      this.gAccel = this.accelValues;
      this.gyro = gyroValues;
      this.rotation = calcRotation.call(this);
      this.accelAndGrav = calcAccel.call(this);
      this.accel = normalAccel.call(this);
      this.endVelocity = calcEndVelocity.call(this);
      this.positionDelta = calcPositionDelta.call(this);
      this.position = calcPosition.call(this);
    }

    Frame.prototype.toTableRow = function() {
      var in_mm, to_mm;
      to_mm = function(coord) {
        return this.position[coord] * 1000;
      };
      in_mm = applyXYZ.call(this, to_mm);
      return "" + in_mm[0] + ", " + in_mm[1] + ", " + in_mm[2];
    };

    scale = function() {
      return this.initialFrame.scale(this.accelValues);
    };

    calcAccel = function() {
      var times9_8;
      times9_8 = function(coord) {
        return this.gAccel[coord] * Gravity;
      };
      return applyXYZ.call(this, times9_8);
    };

    normalAccel = function() {
      var inNED;
      inNED = this.rotation.rotate(this.accelAndGrav);
      return [inNED[0], inNED[1], inNED[2] + Gravity];
    };

    calcTimeDelta = function() {
      return (this.timestamp - this.lastFrame.timestamp) / 1000;
    };

    calcRotation = function() {
      return this.lastFrame.rotation;
    };

    calcEndVelocity = function() {
      var velocity;
      velocity = function(coord) {
        return this.lastFrame.endVelocity[coord] + this.accel[coord] * this.timeDelta;
      };
      return applyXYZ.call(this, velocity);
    };

    calcPositionDelta = function() {
      var posDelta;
      posDelta = function(coord) {
        var v0_t;
        v0_t = this.lastFrame.endVelocity[coord] * this.timeDelta;
        return v0_t + 1 / 2 * this.accel[coord] * Math.pow(this.timeDelta, 2);
      };
      return applyXYZ.call(this, posDelta);
    };

    calcPosition = function() {
      var newPosition;
      newPosition = function(coord) {
        return this.lastFrame.position[coord] + this.positionDelta[coord];
      };
      return applyXYZ.call(this, newPosition);
    };

    applyXYZ = function(fcn) {
      return [0, 1, 2].map(fcn, this);
    };

    return Frame;

  })();

  module.exports = Frame;

}).call(this);
